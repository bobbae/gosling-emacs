@begin(CommandList)
@ComPara(name="active-process", key="[unbound]")
(active-process) -- 
Returns the name of the active process as defined in the section describing
the process mechanism.

@ComPara(name="change-current-process", key="[unbound]")
(change-current-process "process-name") -- 
Sets the current process to the one named.

@ComPara(name="continue-process", key="[unbound]")
(continue-process "process-name") -- 
@Index[stop-process]
Continue a process stopped by @i[stop-process].

@ComPara(name="current-process", key="[unbound]")
(current-process) -- 
Returns the name of the current process as defined in the section describing
the process mechanism.

@ComPara(name="eot-process", key="[unbound]")
(eot-process "process-name") -- 
Send an EOT to the process.

@ComPara(name="int-process", key="[unbound]")
(int-process "process-name") -- 
Send an interrupt signal to the process.

@ComPara(name="kill-process", key="[unbound]")
(kill-process "process-name") -- 
Send a kill signal to the process. 

@ComPara(name="list-processes", key="[unbound]")
(list-processes) -- 
Analagous to "list-buffers".  Processes which have died only
appear once in this list before completely disappearing.

@ComPara(name="process-filter-name", key="[unbound]")
Returns the name of the filter procedure attached to some buffer.

@ComPara(name="process-id", key="[unbound]")
Returns the process id of the process attached to some buffer.

@ComPara(name="process-output", key="[unbound]")
@Index[on-output-procedure]
(process-output) -- Can only be called by the @i[on-output-procedure] to
procure the output generated by the process whose name is given by
@i[MPX-process]. Returns the output as a string.

@ComPara(name="process-status", key="[unbound]")
(process-status "process-name") -- 
Returns -1 if "process-name" isn't a process, 0 if the process
is stopped, and 1 if the process is running.

@ComPara(name="quit-process", key="[unbound]")
(quit-process "process-name") -- 
Send a quit signal to the process.

@ComPara(name="region-to-process", key="[unbound]")
(region-to-process "process-name") -- 
The region is wrapped up and sent to the process.

@VarPara(name="silently-kill-processes")
If ON @Value(Emacs) will kill processes when it exits @i[without] asking any
questions.  Normally, if you have processes running when @Value(Emacs) exits,
the question "You have processes on the prowl, should I hunt them down for
you" is asked.  (default OFF)

@ComPara(name="start-filtered-process", key="[unbound]")
(start-filtered-process "command" "buffer-name" "on-output-procedure") -- 
@Index[start-process]
Does the same thing as start-process except that things are set
@Index[on-output-procedure]
up so that "on-output-procedure" is automatically called whenever
output has been received from this process.  This procedure can access
the name of the process producing the output by refering to the
variable @i[MPX-process], and can retrieve the output itself by calling the
procedure @i[process-output].

@begin(B, leftmargin +5, rightmargin +5)
The filter procedure must be careful to avoid generating side-effects
(eg. @i[search-forward]).  Moreover, if it attempts to go to the terminal for
information, output from other processes may be lost.
@end(b)

@ComPara(name="start-process", key="[unbound]")
(start-process "command" "buffer-name") -- 
The home shell is used to start a process executing the
command.  This process is tied to the buffer "buffer-name" unless it is
null in which case the "Command execution" buffer is used.  Output from
the process is automatically attached to the end of the buffer.  Each time
this is done, the mark is left at the end of the output (which is the end of
the buffer).

@ComPara(name="stop-process", key="[unbound]")
(stop-process "process-name") -- 
Tell the process to stop by sending it a stop signal.  Use
@Index[continue-process]
@i[continue-process] to carry on.

@ComPara(name="string-to-process", key="[unbound]")
(string-to-process "process-name" "string") -- 
The string is sent to the process.

@end(CommandList)
