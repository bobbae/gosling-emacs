head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	93.08.11.05.17.30;	author reid;	state Exp;
branches;
next	1.3;

1.3
date	86.05.19.16.49.45;	author mcdaniel;	state Exp;
branches;
next	1.2;

1.2
date	86.05.06.14.35.22;	author mcdaniel;	state Exp;
branches;
next	1.1;

1.1
date	86.04.16.13.52.13;	author mcdaniel;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changes for BSDI. stty() is obsolete;use ioctl.
Brian
@
text
@/* terminal control module for terminals described by TERMCAP */

/*              Copyright (c) 1981,1980 James Gosling           */

/*      Modified 1-Dec-80 by Dan Hoey (DJH) to understand C100 underlines */
/*      Modified 2-Dec-80 (DJH) to turn off highlighting on insertline */
/*      Modified 4 Aug 81 by JQ Johnson:  use "dm","ei","pc","mi" */
/*      Modified 24-Aug-81 by Jeff Mogul (JCM) at Stanford
 *              - uses "nl" instead of \n in case \n is destructive
 *      Modified 8-Sept-81 by JCM @@ Stanford
 *              - re-integrated changes from Gosling since July '81
 *      Modified 7 March 1983, Jeffrey Mogul
 *              - installed fixes from Chuck Sword (mazama!chuck)
 */

#include <stdio.h>
#include <sgtty.h>
#include "config.h"
#include "keyboard.h"
#include "display.h"

static
int     curX, curY;

char *tgetstr ();
char *UP;
char *BC;
char PC;
short ospeed;

static char *ILstr, *DLstr, *ICstr, *DCstr, *ELstr, *ESstr, *HLBstr,
        *HLEstr, *ICPstr, *ICPDstr, *CursStr, *BEGINstr, *ENDstr,
        *TIstr, *TEstr,
        *ICEstr, *NDstr, *VBstr, *EDstr, *DMstr, *NLstr;
static int ULflag;      /* DJH -- 1 if terminal has underline */
static int MIflag;      /* JQJ -- 1 if safe to move while in insert mode */

static
dumpchar (c) {
    putchar (c);
}

static
enum IDmode { m_insert = 1, m_overwrite = 0 }
        CurMode, DesMode;

static
INSmode (new)
enum IDmode new; {
        DesMode = new;
        if(DesMode==m_insert && ICstr==0) abort();
};

static curHL, desHL;
static
HLmode (on) {
    desHL = on;
}

static
setHL () {
    register char *com;
    if (curHL == desHL)
        return;
    if(com = desHL ? HLBstr : HLEstr)
        tputs (com, 0, dumpchar);
    curHL = desHL;
}

static
clearHL () {
    if (curHL) {
        register oldes = desHL;
        desHL = 0;
        setHL ();
        desHL = oldes;
    }
}

static
setmode () {
    if (DesMode == CurMode)
        return;
    tputs(DesMode==m_insert ? ICstr : ICEstr, 0, dumpchar);
    CurMode = DesMode;
};

static
inslines (n) {
    HLmode (0);         /* DJH -- Don't highlight the inserted line */
    setHL ();
    while (--n >= 0)
        tputs (ILstr, tt.t_length-curY, dumpchar);
};

static
dellines (n) {
    while (--n >= 0)
        tputs(DLstr, tt.t_length-curY, dumpchar);
};

static
writechars (start, end)
register char   *start,
                *end; {
    setmode ();
    setHL();
    while (start <= end) {
        if(CurMode == m_insert && ICPstr) tputs(ICPstr, tt.t_width-curX, dumpchar);
                        /* DJH -- blank out space before underlines */
        if(*start == '_' && CurMode != m_insert && ULflag != 0) {
                putchar (' ');
                putchar (*BC);
        }                       
        putchar (*start++);
        if(CurMode == m_insert && ICPDstr) tputs(ICPDstr, tt.t_width-curX, dumpchar);
        curX++;
    }
};

static
blanks (n) {
    setmode ();
    setHL ();
    while (--n >= 0) {
        if (CurMode == m_insert && ICPstr)
            tputs (ICPstr, tt.t_width - curX, dumpchar);
        putchar (' ');
        if (CurMode == m_insert && ICPDstr)
            tputs (ICPDstr, 1 /* tt.t_width - curX */, dumpchar);
        curX++;
    }
};

static float BaudFactor;

static pad(n,f)
float   f; {
    register    k = n * f * BaudFactor;
    while (--k >= 0)
        putchar (PC);
};

static
topos (row, column) {
    clearHL ();                 /* many terminals can't hack highlighting
                                   around cursor positioning.  Silly twits! */
    if (CurMode==m_insert && ! MIflag) {
        tputs(ICEstr, 0, dumpchar);     /* some terminals can't move in */
        CurMode = m_overwrite;          /* insert mode -- JQJ */
    }
    if (curY == row) {
        if (curX == column)
            return;
        if (curX == column + 1 && (CurMode != m_insert)) {
            tputs (BC, 0, dumpchar);
            goto done;
        }
        if (curX == column - 1 && NDstr && CurMode != m_insert){
            tputs (NDstr, 0, dumpchar);
            goto done;
        }
    }
    if (curY - 1 == row && curX == column && UP != 0
                && CurMode != m_insert){
        tputs (UP, 0, dumpchar);
        goto done;
    }
    if ( (curY + 1 == row && (column == 1 || column==curX))
                                        && (CurMode != m_insert) ){
        if(column!=curX) putchar (015);
        tputs (NLstr, 0, dumpchar);
/*      putchar (012);          JCM */
        goto done;
    }
    tputs(tgoto (CursStr, column-1, row-1), 0, dumpchar);
done:
    curX = column;
    curY = row;
};

static
flash () {                      /* dump a visible bell */
    tputs (VBstr, 0, dumpchar);
}

static
init (BaudRate) {
    static char tbuf[1024];
    static char combuf[1024];
    extern  old;
    char   *fill = combuf;
    static  inited;
    if (!inited)
        if (tgetent (tbuf, getenv ("TERM")) <= 0) {
            ioctl (1, TIOCSETP, &old);
#ifdef OneEmacsPerTty   /* TPM 31-Jan-82 */
            UnlockTty();
#endif
            quit (1, "No environment-specified terminal type -- see TSET(1), sh(1)\n");
        }
    inited = 1;
    ILstr = tgetstr ("al", &fill);
    DLstr = tgetstr ("dl", &fill);
    ICstr = tgetstr ("im", &fill);
    ICEstr = tgetstr ("ei", &fill);
    MIflag = tgetflag ("mi");   /* can move in insert mode */
    DCstr = tgetstr ("dc", &fill);
    ELstr = tgetstr ("ce", &fill);
    ESstr = tgetstr ("cl", &fill);
    HLBstr = tgetstr ("so", &fill);
    HLEstr = tgetstr ("se", &fill);
    ICPstr = tgetstr ("ic", &fill);
    ICPDstr = tgetstr ("ip", &fill);
    CursStr = tgetstr ("cm", &fill);
    UP = tgetstr ("up", &fill);
    NDstr = tgetstr ("nd", &fill);
    VBstr = tgetstr ("vb", &fill);
    TIstr = tgetstr ("ti", &fill);
    TEstr = tgetstr ("te", &fill);
    DMstr = tgetstr ("dm", &fill);/* start delete mode */
    EDstr = tgetstr ("ed", &fill);/* end delete mode */
    BC = tgetstr ("bc", &fill);
    if (BC == 0)
        BC = "\b";
    ULflag = tgetflag ("ul");   /* DJH -- Find out about underline */
    NLstr = tgetstr ("nl", &fill);/* JCM -- find out about newline */
    if (NLstr == 0)
        NLstr = "\n";           /*   use default if none specified */
    MetaFlag = tgetflag ("MT");
    BEGINstr = tgetstr ("ti", &fill);
/*    PC = (tgetstr("pc", &fill)!=0) ? *tgetstr("pc", &fill) : 0; JQJ */
    PC = 0;
    BaudFactor = 1 / (1 - (.45 +.3 * BaudRate / 9600.))
        * (BaudRate / 10000.);
    if (CursStr == 0 || UP == 0 || ELstr == 0 || ESstr == 0) {
        ioctl (1, TIOCSETP, &old);
#ifdef OneEmacsPerTty   /* TPM 31-Jan-82 */
        UnlockTty();
#endif
        quit (1, "Sorry, this terminal isn't powerful enough to run Emacs.\n\
It is missing some important features.\n");
    }
    tt.t_ILmf = BaudFactor * 0.75;
    tt.t_ILov = ILstr ? 2 : MissingFeature;
    if (!ILstr)
        tt.t_inslines = tt.t_dellines = (int (*) ()) - 1;
    if (VBstr)
        tt.t_flash = flash;
    if (ICstr && DCstr) {
        tt.t_ICmf = 1;
        tt.t_ICov = 4;
        tt.t_DCmf = 2;
        tt.t_DCov = 0;
    }
    else {
        tt.t_ICmf = MissingFeature;
        tt.t_ICov = MissingFeature;
        tt.t_DCmf = MissingFeature;
        tt.t_DCov = MissingFeature;
    }
    tt.t_length = tgetnum ("li");
/*  tt.t_width = tgetnum ("co") - (tgetflag ("in") ? 1 : 0); */
    tt.t_width = tgetnum ("co") - 1;/* Always lie about the width */
};


static
reset () {
    curX = -1;
    curY = -1;
    if (BEGINstr) tputs(BEGINstr, 0, dumpchar);
    if (TIstr) tputs(TIstr, 0, dumpchar);
    topos(1,1);
    tputs(ESstr, 0, dumpchar);
    CurMode = m_insert;
    DesMode = m_overwrite;
};

static
cleanup () {
    HLmode (0);
    DesMode = m_overwrite;
    setmode();
    if (TEstr) tputs(TEstr, 0, dumpchar);
};

static
wipeline () {
    setHL ();
    tputs (ELstr, tt.t_width-curX, dumpchar);
};

static
wipescreen () {
    tputs(ESstr, 0, dumpchar);
    curX = curY = -1;
};

static
delchars (n) {
    if (DMstr) {        /* we may have delete mode, or delete == insert */
        if (strcmp(DMstr,ICstr)==0) {
            if (CurMode  == m_overwrite) {
                tputs(ICstr,0,dumpchar);
                CurMode = m_insert;     /* we're now in both */
            }
        }
        else {
            if (CurMode == m_insert) {
                tputs(ICEstr, 0, dumpchar);
                CurMode = m_overwrite;
            }
            tputs(DMstr,0,dumpchar);
        }
    }
    while (--n >= 0) {
        tputs(DCstr, tt.t_width-curX, dumpchar);
    }
    if (EDstr) {                /* for some, insert mode == delete mode */
                /* bug!  /etc/termcap pads ICEstr but not EDstr */
        if (strcmp(DMstr,ICstr)==0)
            CurMode = m_insert;
        else
            tputs(EDstr,0,dumpchar);
    }
};

TrmTERM () {
        tt.t_INSmode = INSmode;
        tt.t_HLmode = HLmode;
        tt.t_inslines = inslines;
        tt.t_dellines = dellines;
        tt.t_blanks = blanks;
        tt.t_init = init;
        tt.t_cleanup = cleanup;
        tt.t_wipeline = wipeline;
        tt.t_wipescreen = wipescreen;
        tt.t_topos = topos;
        tt.t_reset = reset;
        tt.t_delchars = delchars;
        tt.t_writechars = writechars;
        tt.t_window = 0;
        tt.t_ILmf = 0;
        tt.t_ILov = 0;
        tt.t_ICmf = 0;
        tt.t_ICov = 0;
        tt.t_length = 24;
        tt.t_width = 80;
}
@


1.3
log
@
@
text
@d17 1
d196 1
a196 1
            stty (1, &old);
d237 1
a237 1
        stty (1, &old);
@


1.2
log
@
@
text
@d3 1
a3 1
/*		Copyright (c) 1981,1980 James Gosling		*/
d5 9
a13 7
/*	Modified 1-Dec-80 by Dan Hoey (DJH) to understand C100 underlines */
/*	Modified 2-Dec-80 (DJH) to turn off highlighting on insertline */
/*	Modified 4 Aug 81 by JQ Johnson:  use "dm","ei","pc","mi" */
/*	Modified 24-Aug-81 by Jeff Mogul (JCM) at Stanford
 *		- uses "nl" instead of \n in case \n is destructive
 *	Modified 8-Sept-81 by JCM @@ Stanford
 *		- re-integrated changes from Gosling since July '81
a16 1
#include <ctype.h>
d22 1
a22 1
int	curX, curY;
d31 5
a35 5
	*HLEstr, *ICPstr, *ICPDstr, *CursStr, *BEGINstr, *ENDstr,
	*TIstr, *TEstr,
	*ICEstr, *NDstr, *VBstr, *EDstr, *DMstr, *NLstr;
static int ULflag;	/* DJH -- 1 if terminal has underline */
static int MIflag;	/* JQJ -- 1 if safe to move while in insert mode */
d44 1
a44 1
	CurMode, DesMode;
d49 2
a50 2
	DesMode = new;
	if(DesMode==m_insert && ICstr==0) abort();
d62 2
a63 2
    if (tt.t_modeline == 0 || curHL == desHL)
	return;
d65 1
a65 1
	tputs (com, 0, dumpchar);
d72 4
a75 4
	register oldes = desHL;
	desHL = 0;
	setHL ();
	desHL = oldes;
d82 1
a82 1
	return;
d89 1
a89 1
    HLmode (0);		/* DJH -- Don't highlight the inserted line */
d92 1
a92 1
	tputs (ILstr, tt.t_length-curY, dumpchar);
d98 1
a98 1
	tputs(DLstr, tt.t_length-curY, dumpchar);
d103 2
a104 2
register char	*start,
		*end; {
d108 9
a116 9
	if(CurMode == m_insert && ICPstr) tputs(ICPstr, tt.t_width-curX, dumpchar);
			/* DJH -- blank out space before underlines */
	if(*start == '_' && CurMode != m_insert && ULflag != 0) {
		putchar (' ');
		putchar (*BC);
	}			
	putchar (*start++);
	if(CurMode == m_insert && ICPDstr) tputs(ICPDstr, tt.t_width-curX, dumpchar);
	curX++;
d125 6
a130 6
	if (CurMode == m_insert && ICPstr)
	    tputs (ICPstr, tt.t_width - curX, dumpchar);
	putchar (' ');
	if (CurMode == m_insert && ICPDstr)
	    tputs (ICPDstr, 1 /* tt.t_width - curX */, dumpchar);
	curX++;
d140 1
a140 1
	putchar (PC);
d145 2
a146 2
    clearHL ();			/* many terminals can't hack highlighting
				   around cursor positioning.  Silly twits! */
d148 2
a149 2
	tputs(ICEstr, 0, dumpchar);	/* some terminals can't move in */
	CurMode = m_overwrite;		/* insert mode -- JQJ */
d152 10
a161 10
	if (curX == column)
	    return;
	if (curX == column + 1 && (CurMode != m_insert)) {
	    tputs (BC, 0, dumpchar);
	    goto done;
	}
	if (curX == column - 1 && NDstr && CurMode != m_insert){
	    tputs (NDstr, 0, dumpchar);
	    goto done;
	}
d164 3
a166 3
		&& CurMode != m_insert){
	tputs (UP, 0, dumpchar);
	goto done;
d169 5
a173 5
					&& (CurMode != m_insert) ){
	if(column!=curX) putchar (015);
	tputs (NLstr, 0, dumpchar);
/*	putchar (012);		JCM */
	goto done;
d182 1
a182 1
flash () {			/* dump a visible bell */
a191 1
    int	    mf, ov;			/* for timing calculations */
d194 4
a197 6
    {
	FluidStatic(&inited, sizeof(inited));	/* reset on restart */
	if (tgetent (tbuf, getenv ("TERM")) <= 0) {
	    stty (1, &old);
#ifdef OneEmacsPerTty	/* TPM 31-Jan-82 */
	    UnlockTty();
d199 2
a200 3
	    quit (1, "No environment-specified terminal type -- see TSET(1), sh(1)\n");
	}
    }
d206 1
a206 1
    MIflag = tgetflag ("mi");	/* can move in insert mode */
d224 2
a225 2
	BC = "\b";
    ULflag = tgetflag ("ul");	/* DJH -- Find out about underline */
d228 2
a229 2
	NLstr = "\n";		/*   use default if none specified */
    MetaFlag = tgetflag ("MT") || tgetflag("km");
d233 2
a234 1
    BaudFactor = BaudRate / 10000.;
d236 3
a238 3
	stty (1, &old);
#ifdef OneEmacsPerTty	/* TPM 31-Jan-82 */
	UnlockTty();
d240 1
a240 1
	quit (1, "Sorry, this terminal isn't powerful enough to run Emacs.\n\
d243 2
a244 6
    if (ILstr)
	costof(ILstr, &ov, &mf);
    else
	ov = mf = MissingFeature;
    tt.t_ILmf = mf;
    tt.t_ILov = ov;
d246 1
a246 1
	tt.t_inslines = tt.t_dellines = (int (*) ()) - 1;
d248 1
a248 1
	tt.t_flash = flash;
d250 4
a253 11
	costof(ICstr, &ov, &mf);
	tt.t_ICov = ov + (ICPstr ? mf : 0);
	if (ICPstr)
	    costof(ICPstr, &ov, &mf);
	else
	    ov = mf + 1;
	tt.t_ICmf = ov;

	tt.t_DCov = tt.t_ICov;
	costof(DCstr, &ov, &mf);
	tt.t_DCmf = ov + mf;
d256 4
a259 4
	tt.t_ICmf = MissingFeature;
	tt.t_ICov = MissingFeature;
	tt.t_DCmf = MissingFeature;
	tt.t_DCov = MissingFeature;
d262 2
a263 1
    tt.t_width = tgetnum ("co") - (tgetflag ("xn") ? 1 : 0);
a265 7
static
costof (str, ov, mf)
char *str;
int *ov, *mf;
{
    register char *cp;
    int pad;
a266 14
    *ov = *mf = pad = 0;
    for (cp = str; isdigit(*cp); cp++)
	pad = pad * 10 + (*cp - '0');
    if (*cp == '*')
    {
	*mf = pad * BaudFactor;
	cp++;
    }
    else
	*ov = pad;
    *ov += strlen(cp);
    return *ov;
}

d301 6
a306 13
    if (DMstr) {	/* we may have delete mode, or delete == insert */
	if (strcmp(DMstr,ICstr)) {
	    if (CurMode  == m_overwrite) {
	        tputs(ICstr,0,dumpchar);
		CurMode = m_insert;	/* we're now in both */
	    }
	}
	else {
	    if (CurMode == m_insert) {
		tputs(ICEstr, 0, dumpchar);
		CurMode = m_overwrite;
	    }
	    tputs(DMstr,0,dumpchar);
d308 7
d317 1
a317 1
	tputs(DCstr, tt.t_width-curX, dumpchar);
d319 6
a324 6
    if (EDstr) {		/* for some, insert mode == delete mode */
		/* bug!  /etc/termcap pads ICEstr but not EDstr */
        if (strcmp(DMstr,ICstr))
	    CurMode = m_insert;
	else
	    tputs(EDstr,0,dumpchar);
d329 20
a348 21
	tt.t_INSmode = INSmode;
	tt.t_HLmode = HLmode;
	tt.t_inslines = inslines;
	tt.t_dellines = dellines;
	tt.t_blanks = blanks;
	tt.t_init = init;
	tt.t_cleanup = cleanup;
	tt.t_wipeline = wipeline;
	tt.t_wipescreen = wipescreen;
	tt.t_topos = topos;
	tt.t_reset = reset;
	tt.t_delchars = delchars;
	tt.t_writechars = writechars;
	tt.t_window = 0;
	tt.t_ILmf = 0;
	tt.t_ILov = 0;
	tt.t_ICmf = 0;
	tt.t_ICov = 0;
	tt.t_length = 24;
	tt.t_width = 80;
	tt.t_modeline = 1;		/* do highlight */
@


1.1
log
@Initial revision
@
text
@d383 1
a383 1
};
@
